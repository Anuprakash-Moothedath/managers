plugins {
    id 'biz.aQute.bnd.builder' version '5.3.0' apply false
    
    id 'jacoco'
    id 'maven-publish'
}

// Note: The following version number is updated using the set-version.sh tool.
// It is used as the version number of the managers bundle, which contains a yaml
// file which is in a release.yaml, but published to maven, so that the OBR build 
// can pick it up later.
version = "0.30.0"

task clean {
   // make sure the build directory is gone 
   doFirst {
      delete "${buildDir}"
   }
}

// A configuration to publish the merge exec into
configurations {
    archives
    release_metadata
}

//  Get all the sub projects with jacoco plugin to add itself to the merge 
subprojects {
   plugins.withId('jacoco')  {
        rootProject.tasks.named('jacocoMerge').get().executionData(tasks.named('test').get())
   }
}

// Define the artifact
def execFile = layout.buildDirectory.file('jacoco/jacocoMerge.exec')
def execArtifact = artifacts.add('archives', execFile.get().asFile) {
    builtBy 'jacocoMerge'
}


task jacocoMerge(type: JacocoMerge) {
    doFirst {
        // go through all the files and remove the ones that do not exist.   some managers do not have unit tests yet
        executionData = executionData.filter({f -> f.exists()})
    }

    enabled = jacocoEnabled.toBoolean()
}

repositories {
    maven {
        url "$sourceMaven"
    }
    maven {
        url "$centralMaven"
    }
}



if (jacocoEnabled.toBoolean()) {
    publishing {
        publications {
            maven(MavenPublication) {
                artifact execArtifact
                
                groupId = 'codecoverage'
                artifactId = 'manager-unit-tests'
            }
        }
        repositories {
            maven {
                url  = "$targetMaven"
                
                if ("$targetMaven".startsWith('http')) {
                    credentials {
                        username System.getenv('MAVENUSERNAME')
                        password System.getenv('MAVENPASSWORD')
                    }
                }
            }
        }
    }
}

// Build the release.yaml file
task buildReleaseYaml(type: Exec) {
    println 'Building the release.yaml file...'

    // commandLine 'sh', './build-release-yaml.sh', '--file', "$projectDir/release.yaml"
    commandLine 'sh', './build-release-yaml.sh', '--file', "$buildDir/release.yaml"
}

def myReleaseYaml = artifacts.add('release_metadata', file("$buildDir/release.yaml")) {
    builtBy 'buildReleaseYaml'
}

// Publish the release.yaml as a maven artifact.
// Note: The maven co-ordinates are versioned using the version for this bundle.
publishing {
    publications {
        maven(MavenPublication) {
            artifact myReleaseYaml
            artifactId "dev.galasa.managers"
            groupId 'dev.galasa'
            version version
        }
    }
    repositories {
        maven {
            url  = "$targetMaven"
            
            if ("$targetMaven".startsWith('http')) {
                credentials {
                    username System.getenv('MAVENUSERNAME')
                    password System.getenv('MAVENPASSWORD')
                }
            }
        }
    }
}


